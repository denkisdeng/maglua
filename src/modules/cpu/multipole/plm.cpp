// Copyright (c) Jason Mercer 2012.  All rights reserved.

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#include "plm.h"

// Plm() implements a subset of the Legendre Polynomial function for
// orders in the range [0:16] and ranks in the range [-order:20]

static double faci(int x)
{
	double f = 1;
	for(; x>1; x--)
		f *= x;
	return f;
}

// The relationship has been found:
//
// P[n,l,x] (n/(Pochhammer[-n, l] Pochhammer[n, 1 + l])) = P[n,-l,x]
//
// Coefficients have been calculated for n <= 10
// this creates a fast way to calculate one legendre poly given another

const double _plm_negate[11][21] =
{{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,-2,1,-0.5,0,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,0,24,-6,1,-0.16666666666666666,0.041666666666666664,0,0,0,0,0,0,0,0},
   {0,0,0,0,0,0,0,-720,120,-12,1,-0.08333333333333333,0.008333333333333333,-0.001388888888888889,0,0,
	0,0,0,0,0},{0,0,0,0,0,0,40320,-5040,360,-20,1,-0.05,0.002777777777777778,-0.0001984126984126984,
	0.0000248015873015873,0,0,0,0,0,0},{0,0,0,0,0,-3628800,362880,-20160,840,-30,1,
	-0.03333333333333333,0.0011904761904761906,-0.0000496031746031746,2.7557319223985893e-6,
	-2.755731922398589e-7,0,0,0,0,0},{0,0,0,0,479001600,-39916800,1814400,-60480,1680,-42,1,
	-0.023809523809523808,0.0005952380952380953,-0.000016534391534391536,5.511463844797178e-7,
	-2.505210838544172e-8,2.08767569878681e-9,0,0,0,0},
   {0,0,0,-87178291200,6227020800,-239500800,6652800,-151200,3024,-56,1,-0.017857142857142856,
	0.00033068783068783067,-6.613756613756614e-6,1.5031265031265032e-7,-4.17535139757362e-9,
	1.6059043836821613e-10,-1.1470745597729725e-11,0,0,0},
   {0,0,20922789888000,-1307674368000,43589145600,-1037836800,19958400,-332640,5040,-72,1,
	-0.013888888888888888,0.0001984126984126984,-3.006253006253006e-6,5.010421677088344e-8,
	-9.635426302092969e-10,2.294149119545945e-11,-7.647163731819816e-13,4.779477332387385e-14,0,0},
   {0,-6402373705728000,355687428096000,-10461394944000,217945728000,-3632428800,51891840,-665280,
	7920,-90,1,-0.011111111111111112,0.00012626262626262626,-1.503126503126503e-6,1.9270852604185938e-8,
	-2.752978943455134e-10,4.58829823909189e-12,-9.55895466477477e-14,2.8114572543455206e-15,
	-1.5619206968586225e-16,0},{2432902008176640000,-121645100408832000,3201186852864000,
	-59281238016000,871782912000,-10897286400,121080960,-1235520,11880,-110,1,-0.00909090909090909,
	0.00008417508417508418,-8.093758093758094e-7,8.258936830365401e-9,-9.17659647818378e-11,
	1.1470745597729724e-12,-1.6868743526073125e-14,3.123841393717245e-16,-8.22063524662433e-18,
	4.110317623312165e-19}};

double Plm_negate_order(const int l, const int m, const double plm)
{
	return plm * _plm_negate[l][10-m];
}

const double _plm_coef[11][21][11] =
{
	{{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0.5,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0},{-1,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0.125,0,-0.125,0,0,0,0,0,0,0,0},
		{0,0.5,0,0,0,0,0,0,0,0,0},{-0.5,0,1.5,0,0,0,0,0,0,0,0},{0,-3,0,0,0,0,0,0,0,0,0},
		{3,0,-3,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0.020833333333333332,0,-0.020833333333333332,0,0,0,0,0,0,0,0},
		{0,0.125,0,-0.125,0,0,0,0,0,0,0},{-0.125,0,0.625,0,0,0,0,0,0,0,0},
		{0,-1.5,0,2.5,0,0,0,0,0,0,0},{1.5,0,-7.5,0,0,0,0,0,0,0,0},{0,15,0,-15,0,0,0,0,0,0,0},
		{-15,0,15,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0.0026041666666666665,0,-0.005208333333333333,0,0.0026041666666666665,0,0,0,0,0,0},
		{0,0.020833333333333332,0,-0.020833333333333332,0,0,0,0,0,0,0},
		{-0.020833333333333332,0,0.16666666666666666,0,-0.14583333333333334,0,0,0,0,0,0},
		{0,-0.375,0,0.875,0,0,0,0,0,0,0},{0.375,0,-3.75,0,4.375,0,0,0,0,0,0},
		{0,7.5,0,-17.5,0,0,0,0,0,0,0},{-7.5,0,60,0,-52.5,0,0,0,0,0,0},
		{0,-105,0,105,0,0,0,0,0,0,0},{105,0,-210,0,105,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0.00026041666666666666,0,-0.0005208333333333333,0,0.00026041666666666666,0,0,0,0,0,0},
		{0,0.0026041666666666665,0,-0.005208333333333333,0,0.0026041666666666665,0,0,0,0,0},
		{-0.0026041666666666665,0,0.026041666666666668,0,-0.0234375,0,0,0,0,0,0},
		{0,-0.0625,0,0.25,0,-0.1875,0,0,0,0,0},{0.0625,0,-0.875,0,1.3125,0,0,0,0,0,0},
		{0,1.875,0,-8.75,0,7.875,0,0,0,0,0},{-1.875,0,26.25,0,-39.375,0,0,0,0,0,0},
		{0,-52.5,0,210,0,-157.5,0,0,0,0,0},{52.5,0,-525,0,472.5,0,0,0,0,0,0},
		{0,945,0,-1890,0,945,0,0,0,0,0},{-945,0,1890,0,-945,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0.00002170138888888889,0,-0.00006510416666666667,0,0.00006510416666666667,0,
		 -0.00002170138888888889,0,0,0,0},{0,0.00026041666666666666,0,-0.0005208333333333333,0,
		 0.00026041666666666666,0,0,0,0,0},{-0.00026041666666666666,0,0.0033854166666666668,0,
		 -0.005989583333333334,0,0.002864583333333333,0,0,0,0},
		{0,-0.0078125,0,0.036458333333333336,0,-0.028645833333333332,0,0,0,0,0},
		{0.0078125,0,-0.1484375,0,0.3984375,0,-0.2578125,0,0,0,0},
		{0,0.3125,0,-1.875,0,2.0625,0,0,0,0,0},{-0.3125,0,6.5625,0,-19.6875,0,14.4375,0,0,0,0},
		{0,-13.125,0,78.75,0,-86.625,0,0,0,0,0},{13.125,0,-249.375,0,669.375,0,-433.125,0,0,0,0},
		{0,472.5,0,-2205,0,1732.5,0,0,0,0,0},{-472.5,0,6142.5,0,-10867.5,0,5197.5,0,0,0,0},
		{0,-10395,0,20790,0,-10395,0,0,0,0,0},{10395,0,-31185,0,31185,0,-10395,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{1.5500992063492063e-6,0,-4.6502976190476195e-6,0,
		 4.6502976190476195e-6,0,-1.5500992063492063e-6,0,0,0,0},
		{0,0.00002170138888888889,0,-0.00006510416666666667,0,0.00006510416666666667,0,
		 -0.00002170138888888889,0,0,0},{-0.00002170138888888889,0,0.0003255208333333333,0,-0.0005859375,
		 0,0.00028211805555555553,0,0,0,0},{0,-0.00078125,0,0.0049479166666666664,0,
		 -0.007552083333333333,0,0.0033854166666666668,0,0,0},
		{0.00078125,0,-0.01796875,0,0.054427083333333334,0,-0.03723958333333333,0,0,0,0},
		{0,0.0390625,0,-0.3255208333333333,0,0.6588541666666666,0,-0.3723958333333333,0,0,0},
		{-0.0390625,0,1.0546875,0,-3.8671875,0,3.3515625,0,0,0,0},
		{0,-2.1875,0,19.6875,0,-43.3125,0,26.8125,0,0,0},
		{2.1875,0,-59.0625,0,216.5625,0,-187.6875,0,0,0,0},
		{0,118.125,0,-984.375,0,1992.375,0,-1126.125,0,0,0},
		{-118.125,0,2716.875,0,-8229.375,0,5630.625,0,0,0,0},
		{0,-5197.5,0,32917.5,0,-50242.5,0,22522.5,0,0,0},
		{5197.5,0,-77962.5,0,140332.5,0,-67567.5,0,0,0,0},
		{0,135135,0,-405405,0,405405,0,-135135,0,0,0},{-135135,0,405405,0,-405405,0,135135,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{9.68812003968254e-8,0,-3.875248015873016e-7,0,5.812872023809524e-7,0,-3.875248015873016e-7,0,
		 9.68812003968254e-8,0,0},{0,1.5500992063492063e-6,0,-4.6502976190476195e-6,0,
		 4.6502976190476195e-6,0,-1.5500992063492063e-6,0,0,0},
		{-1.5500992063492063e-6,0,0.000027901785714285713,0,-0.00007440476190476191,0,
		 0.0000713045634920635,0,-0.000023251488095238094,0,0},
		{0,-0.00006510416666666667,0,0.0004557291666666667,0,-0.0007161458333333333,0,
		 0.0003255208333333333,0,0,0},{0.00006510416666666667,0,-0.0018229166666666667,0,
		 0.007682291666666666,0,-0.01015625,0,0.004231770833333333,0,0},
		{0,0.00390625,0,-0.037760416666666664,0,0.08463541666666667,0,-0.05078125,0,0,0},
		{-0.00390625,0,0.1328125,0,-0.6875,0,1.1171875,0,-0.55859375,0,0},
		{0,-0.2734375,0,3.0078125,0,-7.8203125,0,5.5859375,0,0,0},
		{0.2734375,0,-9.84375,0,54.140625,0,-93.84375,0,50.2734375,0,0},
		{0,19.6875,0,-216.5625,0,563.0625,0,-402.1875,0,0,0},
		{-19.6875,0,669.375,0,-3465,0,5630.625,0,-2815.3125,0,0},
		{0,-1299.375,0,12560.625,0,-28153.125,0,16891.875,0,0,0},
		{1299.375,0,-36382.5,0,153326.25,0,-202702.5,0,84459.375,0,0},
		{0,67567.5,0,-472972.5,0,743242.5,0,-337837.5,0,0,0},
		{-67567.5,0,1216215,0,-3243240,0,3108105,0,-1.0135125e6,0,0},
		{0,-2027025,0,6081075,0,-6081075,0,2027025,0,0,0},
		{2027025,0,-8108100,0,12162150,0,-8108100,0,2027025,0,0},{0,0,0,0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0},
		{5.382288910934745e-9,0,-2.152915564373898e-8,0,3.229373346560847e-8,0,-2.152915564373898e-8,0,
		 5.382288910934745e-9,0,0},{0,9.68812003968254e-8,0,-3.875248015873016e-7,0,5.812872023809524e-7,
		 0,-3.875248015873016e-7,0,9.68812003968254e-8,0},
		{-9.68812003968254e-8,0,1.937624007936508e-6,0,-5.2315848214285715e-6,0,5.0378224206349205e-6,0,
		 -1.6469804067460318e-6,0,0},{0,-4.6502976190476195e-6,0,0.000040302579365079364,0,
		 -0.00009300595238095238,0,0.00008370535714285714,0,-0.00002635168650793651,0},
		{4.6502976190476195e-6,0,-0.00014880952380952382,0,0.0006789434523809524,0,
		 -0.0009300595238095238,0,0.0003952752976190476,0,0},
		{0,0.0003255208333333333,0,-0.00390625,0,0.012369791666666666,0,-0.014322916666666666,0,
		 0.005533854166666667,0},{-0.0003255208333333333,0,0.013020833333333334,0,-0.076171875,0,
		 0.13541666666666666,0,-0.07194010416666667,0,0},
		{0,-0.02734375,0,0.3828125,0,-1.421875,0,1.9296875,0,-0.86328125,0},
		{0.02734375,0,-1.203125,0,7.8203125,0,-15.640625,0,9.49609375,0,0},
		{0,2.4609375,0,-36.09375,0,140.765625,0,-201.09375,0,94.9609375,0},
		{-2.4609375,0,108.28125,0,-703.828125,0,1407.65625,0,-854.6484375,0,0},
		{0,-216.5625,0,3031.875,0,-11261.25,0,15283.125,0,-6837.1875,0},
		{216.5625,0,-8662.5,0,50675.625,0,-90090,0,47860.3125,0,0},
		{0,16891.875,0,-202702.5,0,641891.25,0,-743242.5,0,287161.875,0},
		{-16891.875,0,540540,0,-2.46621375e6,0,3378375,0,-1.435809375e6,0,0},
		{0,-1.0135125e6,0,8783775,0,-20270250,0,18243225,0,-5.7432375e6,0},
		{1.0135125e6,0,-20270250,0,54729675,0,-52702650,0,1.72297125e7,0,0},
		{0,34459425,0,-137837700,0,206756550,0,-137837700,0,34459425,0},
		{-34459425,0,137837700,0,-206756550,0,137837700,0,-34459425,0,0},{0,0,0,0,0,0,0,0,0,0,0}},
	   {{2.691144455467372e-10,0,-1.3455722277336862e-9,0,2.6911444554673723e-9,0,
		 -2.6911444554673723e-9,0,1.3455722277336862e-9,0,-2.691144455467372e-10},
		{0,5.382288910934745e-9,0,-2.152915564373898e-8,0,3.229373346560847e-8,0,-2.152915564373898e-8,0,
		 5.382288910934745e-9,0},{-5.382288910934745e-9,0,1.2379264495149912e-7,0,-4.4134769069664903e-7,
		 0,6.351100914902999e-7,0,-4.144362461419753e-7,0,1.0226348930776014e-7},
		{0,-2.906436011904762e-7,0,2.7126736111111112e-6,0,-6.394159226190476e-6,0,5.8128720238095235e-6,
		 0,-1.8407428075396826e-6,0},{2.906436011904762e-7,0,-0.00001075381324404762,0,
		 0.0000618102058531746,0,-0.00012381417410714285,0,0.000103759765625,0,-0.0000312926277281746},
		{0,0.000023251488095238094,0,-0.00031001984126984125,0,0.0010509672619047619,0,
		 -0.0012648809523809524,0,0.0005006820436507936,0},
		{-0.000023251488095238094,0,0.0010928199404761905,0,-0.00804501488095238,0,0.020414806547619048,
		 0,-0.020949590773809524,0,0.007510230654761905},
		{0,-0.0022786458333333335,0,0.036458333333333336,0,-0.150390625,0,0.22135416666666666,0,
		 -0.10514322916666667,0},{0.0022786458333333335,0,-0.12076822916666667,0,1.0071614583333333,0,
		 -2.9029947916666665,0,3.3811848958333335,0,-1.3668619791666667},
		{0,0.24609375,0,-4.265625,0,19.1953125,0,-31.078125,0,16.40234375,0},
		{-0.24609375,0,13.53515625,0,-117.3046875,0,351.9140625,0,-427.32421875,0,180.42578125},
		{0,-27.0703125,0,469.21875,0,-2111.484375,0,3418.59375,0,-1804.2578125,0},
		{27.0703125,0,-1434.7265625,0,11965.078125,0,-34487.578125,0,40168.4765625,0,-16238.3203125},
		{0,2815.3125,0,-45045,0,185810.625,0,-273487.5,0,129906.5625,0},
		{-2815.3125,0,132319.6875,0,-974098.125,0,2.471844375e6,0,-2.5365965625e6,0,909345.9375},
		{0,-253378.125,0,3378375,0,-1.145269125e7,0,13783770,0,-5.456075625e6,0},
		{253378.125,0,-9.374990625e6,0,5.388508125e7,0,-1.0793908125e8,0,9.0455990625e7,0,
		 -2.7280378125e7},{0,1.72297125e7,0,-160810650,0,379053675,0,-344594250,0,1.091215125e8,0},
		{-1.72297125e7,0,3.962833875e8,0,-1412836425,0,2033106075,0,-1.3266878625e9,0,3.273645375e8},
		{0,-654729075,0,2618916300,0,-3928374450,0,2618916300,0,-654729075,0},
		{654729075,0,-3273645375,0,6547290750,0,-6547290750,0,3273645375,0,-654729075}}
};


double Plm(const int l, const int m, const double x)
{
	double X = 1;
	const double* coef = _plm_coef[l][m+10];
	double result = coef[0];

	for(int i=1; i<=l; i++)
	{
		X *= x;
		result += coef[i] * X;
	}

	if( (m+10)&0x1 ) //odd order. Scale by sqrt(1-x*x)
		result *= sqrt(1.0 - x*x);

	return result;
}

#if 0
// the coefficients below are from a script that parsed the
// output of Mathematica commands similar to:
//  L := 2
//	F[l_, m_] := LegendreP[l, -m, x] / (1 - x)^(m/2)/((m + l)! (1 + x)^(m/2))
//	Table[{L, m, CoefficientList[Expand[FullSimplify[F[L, m]]], x]}, {m, -L, 20}]

double Plm(const int l, const int m, const double x)
{
	if(m > abs(l)) return 0.0;
	//if(abs(m) > abs(l)) return 0.0;

	if(l < 0)
	{
		return Plm(-l-1, m, x);
	}

	const int em = -m;

	switch(l)
	{
	//if(l == 0)
	case 0:
	{
		return pow(1-x, em * 0.5) / (((double)faci(em+l)) * pow(1+x, em * 0.5));
	}

	case 1:
//	if(l == 1)
	{
		return pow(1-x, em * 0.5) / (((double)faci(em+l)) * pow(1+x, em * 0.5)) * (em + x);
	}

	case 2:
//	if(l == 2)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		switch(em)
		{
			case  -2: return  (3 - 3*x2);
			case  -1: return  (-3*x*sqrt(1 - x2));
			case   0: return  ((-1 + 3*x2)/2.);
			case   1: return  ((x*sqrt(1 - x2))/2.);
			case   2: return  (-((-1 + x)*(1 + x))/8.);
			case   3: return  ((pow(1 - x,1.5)*(8 + 3*x*(3 + x)))/(120.*pow(1 + x,1.5)));
			case   4: return  ((pow(-1 + x,2)*(5 + x*(4 + x)))/(240.*pow(1 + x,2)));
			case   5: return  ((pow(1 - x,2.5)*(8 + x*(5 + x)))/(1680.*pow(1 + x,2.5)));
			case   6: return  (-(pow(-1 + x,3)*(35 + 3*x*(6 + x)))/(40320.*pow(1 + x,3)));
			case   7: return  ((pow(1 - x,3.5)*(16 + x*(7 + x)))/(120960.*pow(1 + x,3.5)));
			case   8: return  ((pow(-1 + x,4)*(21 + x*(8 + x)))/(1.2096e6*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(80 + 3*x*(9 + x)))/(3.99168e7*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(33 + x*(10 + x)))/(1.596672e8*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(40 + x*(11 + x)))/(2.0756736e9*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(143 + 3*x*(12 + x)))/(8.71782912e10*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(56 + x*(13 + x)))/(4.35891456e11*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(65 + x*(14 + x)))/(6.974263296e12*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(224 + 3*x*(15 + x)))/(3.55687428096e14*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(85 + x*(16 + x)))/(2.134124568576e15*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(96 + x*(17 + x)))/(4.0548366802944e16*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(323 + 3*x*(18 + x)))/(2.43290200817664e18*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(120 + x*(19 + x)))/(1.703031405723648e19*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(133 + x*(20 + x)))/(3.7466690925920256e20*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 3:
//	if(l == 3)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		switch(em)
		{
			case  -3: return  (-15*pow(1 - x2,1.5));
			case  -2: return  (-15*x*(-1 + x2));
			case  -1: return  ((3*(1 - 5*x2)*sqrt(1 - x2))/2.);
			case   0: return  ((x*(-3 + 5*x2))/2.);
			case   1: return  ((sqrt(1 - x2)*(-1 + 5*x2))/8.);
			case   2: return  ((x - x3)/8.);
			case   3: return  (pow(1 - x2,1.5)/48.);
			case   4: return  ((pow(-1 + x,2)*(16 + x*(29 + 5*x*(4 + x))))/(1680.*pow(1 + x,2)));
			case   5: return  ((pow(1 - x,2.5)*(35 + x*(47 + 5*x*(5 + x))))/(13440.*pow(1 + x,2.5)));
			case   6: return  (-(pow(-1 + x,3)*(64 + x*(69 + 5*x*(6 + x))))/(120960.*pow(1 + x,3)));
			case   7: return  ((pow(1 - x,3.5)*(3 + x)*(7 + x*(4 + x)))/(241920.*pow(1 + x,3.5)));
			case   8: return  ((pow(-1 + x,4)*(32 + x*(25 + x*(8 + x))))/(2.66112e6*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(231 + x*(159 + 5*x*(9 + x))))/(1.596672e8*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(320 + x*(197 + 5*x*(10 + x))))/(2.0756736e9*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(429 + x*(239 + 5*x*(11 + x))))/(2.90594304e10*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(112 + x*(57 + x*(12 + x))))/(8.71782912e10*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(143 + x*(67 + x*(13 + x))))/(1.3948526592e12*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(896 + x*(389 + 5*x*(14 + x))))/(1.18562476032e14*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(1105 + x*(447 + 5*x*(15 + x))))/(2.134124568576e15*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(1344 + x*(509 + 5*x*(16 + x))))/(4.0548366802944e16*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(323 + x*(115 + x*(17 + x))))/(1.62193467211776e17*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(384 + x*(129 + x*(18 + x))))/(3.406062811447296e18*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(2261 + x*(719 + 5*x*(19 + x))))/(3.7466690925920256e20*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(2640 + x*(797 + 5*x*(20 + x))))/(8.617338912961659e21*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 4:
//	if(l == 4)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		switch(em)
		{
			case  -4: return  (105*pow(-1 + x2,2));
			case  -3: return  (-105*x*pow(1 - x2,1.5));
			case  -2: return  ((-15*(1 - 8*x2 + 7*x4))/2.);
			case  -1: return  ((-5*x*sqrt(1 - x2)*(-3 + 7*x2))/2.);
			case   0: return  ((3 - 30*x2 + 35*x4)/8.);
			case   1: return  ((x*sqrt(1 - x2)*(-3 + 7*x2))/8.);
			case   2: return  ((-1 + 8*x2 - 7*x4)/48.);
			case   3: return  ((x*pow(1 - x2,1.5))/48.);
			case   4: return  (pow(-1 + x2,2)/384.);
			case   5: return  ((pow(1 - x,2.5)*(128 + 5*x*(65 + x*(69 + 7*x*(5 + x)))))/(120960.*pow(1 + x,2.5)));
			case   6: return  (-(pow(-1 + x,3)*(63 + x*(122 + x*(102 + 7*x*(6 + x)))))/(241920.*pow(1 + x,3)));
			case   7: return  ((pow(1 - x,3.5)*(128 + x*(203 + x*(141 + 7*x*(7 + x)))))/(2.66112e6*pow(1 + x,3.5)));
			case   8: return  ((pow(-1 + x,4)*(231 + x*(312 + x*(186 + 7*x*(8 + x)))))/(3.193344e7*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(384 + x*(453 + x*(237 + 7*x*(9 + x)))))/(4.1513472e8*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(429 + 5*x*(90 + x*(42 + x*(10 + x)))))/(4.1513472e9*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(128 + x*(121 + x*(51 + x*(11 + x)))))/(1.24540416e10*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(1287 + x*(1108 + x*(426 + 7*x*(12 + x)))))/(1.3948526592e12*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(1792 + x*(1417 + x*(501 + 7*x*(13 + x)))))/(2.37124952064e13*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(2431 + x*(1778 + x*(582 + 7*x*(14 + x)))))/(4.268249137152e14*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(16128 + 5*x*(2195 + x*(669 + 7*x*(15 + x)))))/(4.0548366802944e16*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(4199 + x*(2672 + x*(762 + 7*x*(16 + x)))))/(1.62193467211776e17*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(768 + x*(9 + x)*(51 + x*(8 + x))))/(4.86580401635328e17*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(969 + x*(546 + x*(138 + x*(18 + x)))))/(1.0704768835977216e19*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(8448 + x*(4503 + x*(1077 + 7*x*(19 + x)))))/(1.7234677825923318e21*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(52003 + 5*x*(5260 + x*(1194 + 7*x*(20 + x)))))/(2.0681613391107983e23*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 5:
//	if(l == 5)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		switch(em)
		{
			case  -5: return  (-945*pow(1 - x2,2.5));
			case  -4: return  (945*x*pow(-1 + x2,2));
			case  -3: return  ((105*sqrt(1 - x2)*(1 - 10*x2 + 9*x4))/2.);
			case  -2: return  ((-105*(x - 4*x3 + 3*x5))/2.);
			case  -1: return  ((-15*sqrt(1 - x2)*(1 - 14*x2 + 21*x4))/8.);
			case   0: return  ((x*(15 - 70*x2 + 63*x4))/8.);
			case   1: return  ((sqrt(1 - x2)*(1 - 14*x2 + 21*x4))/16.);
			case   2: return  ((-x + 4*x3 - 3*x5)/16.);
			case   3: return  (-(sqrt(1 - x2)*(1 - 10*x2 + 9*x4))/384.);
			case   4: return  ((x*pow(-1 + x2,2))/384.);
			case   5: return  (pow(1 - x2,2.5)/3840.);
			case   6: return  (-(pow(-1 + x,3)*(256 + x*(843 + 7*x*(174 + x*(134 + 9*x*(6 + x))))))/(2.66112e6*pow(1 + x,3)));
			case   7: return  ((pow(1 - x,3.5)*(231 + x*(593 + 7*x*(98 + x*(62 + 3*x*(7 + x))))))/(1.064448e7*pow(1 + x,3.5)));
			case   8: return  ((pow(-1 + x,4)*(512 + x*(1093 + 7*x*(152 + x*(82 + 3*x*(8 + x))))))/(1.3837824e8*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(429 + x*(789 + x*(666 + x*(314 + 9*x*(9 + x))))))/(8.3026944e8*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(256 + x*(415 + x*(310 + x*(130 + 3*x*(10 + x))))))/(4.1513472e9*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(3 + x)*(143 + x*(160 + x*(86 + 3*x*(8 + x)))))/(6.64215552e10*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(2048 + x*(2697 + x*(1644 + x*(566 + 9*x*(12 + x))))))/(3.3874993152e12*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(2431 + x*(2931 + 7*x*(234 + x*(74 + x*(13 + x))))))/(4.74249904128e13*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(3584 + x*(3987 + 7*x*(294 + x*(86 + x*(14 + x))))))/(9.010748178432e14*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(46189 + x*(47715 + 7*x*(3270 + x*(890 + 9*x*(15 + x))))))/(1.62193467211776e17*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(3072 + x*(2963 + x*(1328 + x*(338 + 3*x*(16 + x))))))/(1.62193467211776e17*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(4199 + x*(3799 + x*(1598 + x*(382 + 3*x*(17 + x))))))/(3.568256278659072e18*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(16896 + x*(14397 + x*(5706 + x*(1286 + 9*x*(18 + x))))))/(2.4620968322747597e20*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(7429 + x*(5983 + x*(2242 + x*(478 + 3*x*(19 + x))))))/(1.9696774658198077e21*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(67584 + x*(51605 + 7*x*(2620 + x*(530 + 3*x*(20 + x))))))/(3.446935565184664e23*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 6:
//	if(l == 6)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		switch(em)
		{
			case  -6: return  (-10395*pow(-1 + x2,3));
			case  -5: return  (-10395*x*pow(1 - x2,2.5));
			case  -4: return  ((945*pow(-1 + x2,2)*(-1 + 11*x2))/2.);
			case  -3: return  ((315*x*sqrt(1 - x2)*(3 - 14*x2 + 11*x4))/2.);
			case  -2: return  ((-105*(-1 + x)*(1 + x)*(1 - 18*x2 + 33*x4))/8.);
			case  -1: return  ((-21*x*sqrt(1 - x2)*(5 - 30*x2 + 33*x4))/8.);
			case   0: return  ((-5 + 21*x2*(5 - 15*x2 + 11*x4))/16.);
			case   1: return  ((x*sqrt(1 - x2)*(5 - 30*x2 + 33*x4))/16.);
			case   2: return  ((1 - 19*x2 + 51*x4 - 33*x6)/128.);
			case   3: return  (-(x*sqrt(1 - x2)*(3 - 14*x2 + 11*x4))/384.);
			case   4: return  ((pow(-1 + x2,2)*(-1 + 11*x2))/3840.);
			case   5: return  ((x*pow(1 - x2,2.5))/3840.);
			case   6: return  (-pow(-1 + x2,3)/46080.);
			case   7: return  ((pow(1 - x,3.5)*(1024 + 7*x*(595 + x*(1093 + 3*x*(378 + x*(230 + 11*x*(7 + x)))))))/(1.3837824e8*pow(1 + x,3.5)));
			case   8: return  ((pow(-1 + x,4)*(429 + x*(1384 + x*(2063 + 3*x*(592 + x*(305 + 11*x*(8 + x)))))))/(2.7675648e8*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(1024 + 3*x*(927 + x*(1175 + x*(870 + x*(390 + 11*x*(9 + x)))))))/(4.1513472e9*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(2145 + x*(5066 + x*(5615 + 3*x*(1220 + x*(485 + 11*x*(10 + x)))))))/(6.64215552e10*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(4096 + x*(8591 + x*(8485 + 3*x*(1650 + x*(590 + 11*x*(11 + x)))))))/(1.1291664384e12*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(2431 + x*(4596 + x*(4101 + x*(2168 + x*(705 + 11*x*(12 + x)))))))/(6.7749986304e12*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(4096 + x*(7059 + x*(5751 + x*(2782 + x*(830 + 11*x*(13 + x)))))))/(1.287249739776e14*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(46189 + 7*x*(10458 + x*(7845 + x*(3500 + x*(965 + 11*x*(14 + x)))))))/(1.8021496356864e16*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(10240 + x*(15033 + x*(10455 + x*(4330 + x*(1110 + 11*x*(15 + x)))))))/(5.4064489070592e16*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(4199 + x*(5744 + x*(3725 + 3*x*(480 + x*(115 + x*(16 + x)))))))/(3.24386934423552e17*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(6144 + x*(7871 + x*(4783 + 3*x*(578 + x*(130 + x*(17 + x)))))))/(7.460899491741696e18*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(96577 + 3*x*(38790 + x*(22181 + x*(7572 + x*(1605 + 11*x*(18 + x)))))))/(1.9696774658198077e21*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(135168 + x*(153767 + x*(83045 + 3*x*(8930 + x*(1790 + 11*x*(19 + x)))))))/(4.924193664549519e22*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(185725 + x*(200132 + x*(102415 + 3*x*(10440 + x*(1985 + 11*x*(20 + x)))))))/(1.280290352782875e24*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}


	case 7:
//	if(l == 7)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		switch(em)
		{
			case  -7: return  (-135135*pow(1 - x2,3.5));
			case  -6: return  (-135135*x*pow(-1 + x2,3));
			case  -5: return  ((-10395*pow(1 - x2,2.5)*(-1 + 13*x2))/2.);
			case  -4: return  ((3465*x*pow(-1 + x2,2)*(-3 + 13*x2))/2.);
			case  -3: return  ((-315*pow(1 - x2,1.5)*(3 - 66*x2 + 143*x4))/8.);
			case  -2: return  ((-63*(-1 + x)*x*(1 + x)*(15 - 110*x2 + 143*x4))/8.);
			case  -1: return  ((-7*sqrt(1 - x2)*(-5 + 135*x2 - 495*x4 + 429*x6))/16.);
			case   0: return  ((x*(-35 + 315*x2 - 693*x4 + 429*x6))/16.);
			case   1: return  ((sqrt(1 - x2)*(-5 + 135*x2 - 495*x4 + 429*x6))/128.);
			case   2: return  (-((-1 + x)*x*(1 + x)*(15 - 110*x2 + 143*x4))/384.);
			case   3: return  ((pow(1 - x2,1.5)*(3 - 66*x2 + 143*x4))/3840.);
			case   4: return  ((x*pow(-1 + x2,2)*(-3 + 13*x2))/3840.);
			case   5: return  ((pow(1 - x2,2.5)*(-1 + 13*x2))/46080.);
			case   6: return  (-(x*pow(-1 + x2,3))/46080.);
			case   7: return  (pow(1 - x2,3.5)/645120.);
			case   8: return  ((pow(-1 + x,4)*(2048 + x*(9949 + 3*x*(7416 + x*(9705 + 11*x*(720 + x*(363 + 13*x*(8 + x))))))))/(4.1513472e9*pow(1 + x,4)));
			case   9: return  ((pow(1 - x,4.5)*(6435 + x*(25147 + 3*x*(15381 + x*(16845 + 11*x*(1065 + x*(465 + 13*x*(9 + x))))))))/(6.64215552e10*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(16384 + x*(54445 + 3*x*(28566 + x*(27105 + 11*x*(1500 + x*(579 + 13*x*(10 + x))))))))/(1.1291664384e12*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(12155 + x*(35401 + x*(49071 + x*(41245 + 11*x*(2035 + x*(705 + 13*x*(11 + x))))))))/(6.7749986304e12*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(24576 + x*(63967 + x*(79476 + x*(60105 + 11*x*(2680 + x*(843 + 13*x*(12 + x))))))))/(1.287249739776e14*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(46189 + x*(108937 + x*(122889 + x*(84605 + 11*x*(3445 + x*(993 + 13*x*(13 + x))))))))/(2.574499479552e15*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(81920 + x*(176911 + x*(182994 + x*(115745 + 11*x*(4340 + x*(1155 + 13*x*(14 + x))))))))/(5.4064489070592e16*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(3 + x)*(4199 + x*(6972 + x*(5679 + x*(2792 + x*(861 + 13*x*(12 + x)))))))/(1.08128978141184e17*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(20480 + x*(37949 + x*(33744 + x*(18395 + x*(6560 + x*(1515 + 13*x*(16 + x))))))))/(2.486966497247232e18*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(96577 + x*(167249 + 3*x*(46359 + x*(23655 + x*(7905 + x*(1713 + 13*x*(17 + x))))))))/(1.790615878018007e20*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(147456 + x*(239783 + 3*x*(62442 + x*(29955 + x*(9420 + x*(1923 + 13*x*(18 + x))))))))/(4.4765396950450176e21*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(185725 + x*(284743 + 3*x*(69939 + x*(31665 + 11*x*(855 + x*(165 + x*(19 + x))))))))/(9.848387329099038e22*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(90112 + x*(130715 + x*(91164 + x*(39085 + 11*x*(1000 + x*(183 + x*(20 + x))))))))/(8.863548596189134e23*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 8:
	//if(l == 8)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		const double x7 = x6 * x;
		const double x8 = x7 * x;
		switch(em)
		{
			case  -8: return  (2027025*pow(-1 + x2,4));
			case  -7: return  (-2027025*x*pow(1 - x2,3.5));
			case  -6: return  ((-135135*pow(-1 + x2,3)*(-1 + 15*x2))/2.);
			case  -5: return  ((-135135*x*pow(1 - x2,2.5)*(-1 + 5*x2))/2.);
			case  -4: return  ((10395*pow(-1 + x2,2)*(1 - 26*x2 + 65*x4))/8.);
			case  -3: return  ((-3465*x*pow(1 - x2,1.5)*(3 - 26*x2 + 39*x4))/8.);
			case  -2: return  ((-315*(-1 + x)*(1 + x)*(-1 + 33*x2 - 143*x4 + 143*x6))/16.);
			case  -1: return  ((9*x*sqrt(1 - x2)*(35 - 11*x2*(35 - 91*x2 + 65*x4)))/16.);
			case   0: return  ((35 - 1260*x2 + 6930*x4 - 12012*x6 + 6435*x8)/128.);
			case   1: return  ((x*sqrt(1 - x2)*(-35 + 11*x2*(35 - 91*x2 + 65*x4)))/128.);
			case   2: return  (-((-1 + x)*(1 + x)*(-1 + 33*x2 - 143*x4 + 143*x6))/256.);
			case   3: return  ((x*sqrt(1 - x2)*(3 - 29*x2 + 65*x4 - 39*x6))/768.);
			case   4: return  ((pow(-1 + x2,2)*(1 - 26*x2 + 65*x4))/15360.);
			case   5: return  ((x*pow(1 - x2,2.5)*(-1 + 5*x2))/15360.);
			case   6: return  (-(pow(-1 + x2,3)*(-1 + 15*x2))/645120.);
			case   7: return  ((x*pow(1 - x2,3.5))/645120.);
			case   8: return  (pow(-1 + x2,4)/1.032192e7);
			case   9: return  ((pow(1 - x,4.5)*(32768 + 3*x*(61839 + x*(163335 + 11*x*(23505 + x*(24105 + 13*x*(1251 + x*(539 + 15*x*(9 + x)))))))))/(1.1291664384e12*pow(1 + x,4.5)));
			case  10: return  (-(pow(-1 + x,5)*(12155 + x*(56014 + x*(122560 + 11*x*(14870 + x*(13070 + 13*x*(590 + x*(224 + 5*x*(10 + x)))))))))/(2.2583328768e12*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(32768 + x*(129503 + x*(244885 + 11*x*(25905 + x*(20035 + 13*x*(803 + x*(273 + 5*x*(11 + x)))))))))/(4.29083246592e13*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(46189 + x*(161052 + x*(269820 + 11*x*(25420 + x*(17610 + 13*x*(636 + x*(196 + 3*x*(12 + x)))))))))/(5.148998959104e14*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(32768 + x*(102661 + x*(154945 + 11*x*(13195 + x*(8295 + 13*x*(273 + x*(77 + x*(13 + x)))))))))/(3.6042992713728e15*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(29393 + x*(83822 + x*(115360 + x*(98770 + x*(56910 + 13*x*(1722 + x*(448 + 5*x*(14 + x)))))))))/(3.6042992713728e16*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(163840 + x*(429483 + x*(544005 + x*(429415 + x*(228585 + 13*x*(6405 + x*(1547 + 15*x*(15 + x)))))))))/(2.486966497247232e18*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(96577 + x*(234512 + x*(275420 + x*(201840 + x*(99910 + 13*x*(2608 + x*(588 + 5*x*(16 + x)))))))))/(1.9895731977977856e19*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(32768 + x*(74171 + x*(81259 + x*(55607 + x*(25735 + 13*x*(629 + x*(133 + x*(17 + x)))))))))/(9.947865988988928e19*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(37145 + 3*x*(26262 + x*(26976 + x*(17322 + x*(7530 + x*(2250 + x*(448 + 3*x*(18 + x)))))))))/(1.790615878018007e21*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(32768 + x*(65417 + x*(63275 + x*(38285 + x*(15695 + x*(4427 + x*(833 + 5*x*(19 + x)))))))))/(2.6859238170270106e22*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(557175 + x*(1050956 + x*(960820 + 11*x*(49980 + x*(19390 + x*(5180 + x*(924 + 5*x*(20 + x)))))))))/(8.272645356443192e24*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 9:
	//if(l == 9)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		//const double x8 = x7 * x;
		//const double x9 = x8 * x;
		switch(em)
		{
			case  -9: return  (-34459425*pow(1 - x2,4.5));
			case  -8: return  (34459425*x*pow(-1 + x2,4));
			case  -7: return  ((2027025*(1 - 17*x2)*pow(1 - x2,3.5))/2.);
			case  -6: return  ((-675675*x*pow(-1 + x2,3)*(-3 + 17*x2))/2.);
			case  -5: return  ((-135135*pow(1 - x2,2.5)*(1 - 30*x2 + 85*x4))/8.);
			case  -4: return  ((135135*x*pow(-1 + x2,2)*(1 - 10*x2 + 17*x4))/8.);
			case  -3: return  ((-3465*pow(1 - x2,1.5)*(-1 + 39*x2 - 195*x4 + 221*x6))/16.);
			case  -2: return  ((-495*(-1 + x)*x*(1 + x)*(-7 + 91*x2 - 273*x4 + 221*x6))/16.);
			case  -1: return  ((-45*sqrt(1 - x2)*(7 + 11*x2*(-28 + 182*x2 - 364*x4 + 221*x6)))/128.);
			case   0: return  ((x*(315 + 11*x2*(-420 + 13*x2*(126 - 180*x2 + 85*x4))))/128.);
			case   1: return  ((sqrt(1 - x2)*(7 + 11*x2*(-28 + 182*x2 - 364*x4 + 221*x6)))/256.);
			case   2: return  (-((-1 + x)*x*(1 + x)*(-7 + 91*x2 - 273*x4 + 221*x6))/256.);
			case   3: return  ((pow(1 - x2,1.5)*(-1 + 39*x2 - 195*x4 + 221*x6))/3072.);
			case   4: return  ((x*pow(-1 + x2,2)*(1 - 10*x2 + 17*x4))/3072.);
			case   5: return  ((pow(1 - x2,2.5)*(1 - 30*x2 + 85*x4))/215040.);
			case   6: return  (-(x*pow(-1 + x2,3)*(-3 + 17*x2))/645120.);
			case   7: return  ((pow(1 - x2,3.5)*(-1 + 17*x2))/1.032192e7);
			case   8: return  ((x*pow(-1 + x2,4))/1.032192e7);
			case   9: return  (pow(1 - x2,4.5)/1.8579456e8);
			case  10: return  (-(pow(-1 + x,5)*(65536 + x*(424415 + 11*x*(117730 + x*(218980 + 13*x*(20830 + x*(17626 + 5*x*(2030 + x*(764 + 17*x*(10 + x))))))))))/(4.29083246592e13*pow(1 + x,5)));
			case  11: return  ((pow(1 - x,5.5)*(46189 + x*(245935 + 11*x*(56980 + x*(89940 + 13*x*(7370 + x*(5446 + x*(2772 + x*(932 + 17*x*(11 + x))))))))))/(1.716332986368e14*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(131072 + x*(602895 + 11*x*(121500 + x*(168140 + 13*x*(12180 + x*(8022 + x*(3668 + x*(1116 + 17*x*(12 + x))))))))))/(3.6042992713728e15*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(29393 + x*(119965 + x*(236860 + x*(293300 + 13*x*(19110 + x*(11382 + x*(4732 + x*(1316 + 17*x*(13 + x))))))))))/(7.2085985427456e15*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(65536 + x*(241465 + x*(431390 + x*(484820 + 13*x*(28770 + x*(15666 + x*(5978 + x*(1532 + 17*x*(14 + x))))))))))/(1.657977664831488e17*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(676039 + x*(2276265 + x*(3722220 + x*(3836980 + 13*x*(209370 + x*(105126 + 5*x*(7420 + x*(1764 + 17*x*(15 + x))))))))))/(1.9895731977977856e19*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(262144 + x*(814109 + x*(1229264 + x*(1171884 + 13*x*(59248 + x*(27622 + x*(9072 + x*(2012 + 17*x*(16 + x))))))))))/(9.947865988988928e19*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(37145 + x*(107177 + x*(150484 + x*(133556 + x*(81838 + x*(35630 + x*(10948 + x*(2276 + 17*x*(17 + x))))))))))/(1.9895731977977856e20*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(65536 + x*(176733 + x*(232074 + x*(192804 + x*(110718 + x*(45234 + x*(13062 + x*(2556 + 17*x*(18 + x))))))))))/(5.371847634054021e21*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(3 + x)*(37145 + x*(81704 + x*(88868 + x*(61088 + x*(28670 + x*(9320 + x*(2036 + 17*x*(16 + x)))))))))/(1.5041173375351259e23*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(917504 + x*(2192005 + x*(2552420 + x*(1882860 + x*(961660 + x*(350126 + 5*x*(18060 + x*(3164 + 17*x*(20 + x))))))))))/(2.1809701394259327e25*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 10:
	//if(l == 10)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		//const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		switch(em)
		{
			case -10: return  (-654729075*pow(-1 + x2,5));
			case  -9: return  (-654729075*x*pow(1 - x2,4.5));
			case  -8: return  ((34459425*pow(-1 + x2,4)*(-1 + 19*x2))/2.);
			case  -7: return  ((-11486475*x*pow(1 - x2,3.5)*(-3 + 19*x2))/2.);
			case  -6: return  ((-675675*pow(-1 + x2,3)*(3 - 102*x2 + 323*x4))/8.);
			case  -5: return  ((-135135*x*pow(1 - x2,2.5)*(15 - 170*x2 + 323*x4))/8.);
			case  -4: return  ((45045*pow(-1 + x2,2)*(-1 + 45*x2 - 255*x4 + 323*x6))/16.);
			case  -3: return  ((-6435*x*pow(1 - x2,1.5)*(-7 + 105*x2 - 357*x4 + 323*x6))/16.);
			case  -2: return  ((-495*(-1 + x)*(1 + x)*(7 + 13*x2*(-28 + 210*x2 - 476*x4 + 323*x6)))/128.);
			case  -1: return  ((-55*x*sqrt(1 - x2)*(63 + 13*x2*(-84 + 378*x2 - 612*x4 + 323*x6)))/128.);
			case   0: return  ((-63 + 11*x2*(315 + 13*x2*(-210 + 630*x2 - 765*x4 + 323*x6)))/256.);
			case   1: return  ((x*sqrt(1 - x2)*(63 + 13*x2*(-84 + 378*x2 - 612*x4 + 323*x6)))/256.);
			case   2: return  (-((-1 + x)*(1 + x)*(7 + 13*x2*(-28 + 210*x2 - 476*x4 + 323*x6)))/3072.);
			case   3: return  ((x*pow(1 - x2,1.5)*(-7 + 105*x2 - 357*x4 + 323*x6))/3072.);
			case   4: return  ((pow(-1 + x2,2)*(-1 + 45*x2 - 255*x4 + 323*x6))/43008.);
			case   5: return  ((x*pow(1 - x2,2.5)*(15 - 170*x2 + 323*x4))/645120.);
			case   6: return  (-(pow(-1 + x2,3)*(3 - 102*x2 + 323*x4))/1.032192e7);
			case   7: return  ((x*pow(1 - x2,3.5)*(-3 + 19*x2))/1.032192e7);
			case   8: return  ((pow(-1 + x2,4)*(-1 + 19*x2))/1.8579456e8);
			case   9: return  ((x*pow(1 - x2,4.5))/1.8579456e8);
			case  10: return  (-pow(-1 + x2,5)/3.7158912e9);
			case  11: return  ((pow(1 - x,5.5)*(262144 + 11*x*(173965 + x*(602895 + 13*x*(99220 + x*(143780 + x*(146454 + x*(105658 + 17*x*(3124 + x*(1044 + 19*x*(11 + x)))))))))))/(3.6042992713728e15*pow(1 + x,5.5)));
			case  12: return  ((pow(-1 + x,6)*(88179 + x*(533860 + x*(1556475 + 13*x*(218640 + x*(274190 + x*(244776 + x*(156534 + 17*x*(4144 + x*(1251 + 19*x*(12 + x)))))))))))/(7.2085985427456e15*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(262144 + x*(1379755 + x*(3518895 + 13*x*(435500 + x*(484820 + x*(387114 + x*(223034 + 17*x*(5356 + x*(1476 + 19*x*(13 + x)))))))))))/(1.657977664831488e17*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(676039 + x*(3173090 + x*(7241115 + 13*x*(805240 + x*(809270 + x*(586236 + x*(307958 + 17*x*(6776 + x*(1719 + 19*x*(14 + x)))))))))))/(3.979146395595571e18*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(1572864 + x*(6691985 + x*(13872255 + 13*x*(1405140 + x*(1290380 + x*(857094 + x*(414330 + 17*x*(8420 + x*(1980 + 19*x*(15 + x)))))))))))/(9.947865988988928e19*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(260015 + x*(1014512 + x*(1931367 + x*(2340032 + x*(1981742 + x*(1216992 + x*(545398 + 17*x*(10304 + x*(2259 + 19*x*(16 + x)))))))))))/(1.9895731977977856e20*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(524288 + x*(1892491 + x*(3336507 + x*(3748908 + x*(2949324 + x*(1685754 + x*(704634 + 17*x*(12444 + x*(2556 + 19*x*(17 + x)))))))))))/(5.371847634054021e21*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(1002915 + x*(3372406 + x*(5542983 + x*(5812488 + x*(4273206 + x*(2285892 + x*(895734 + 17*x*(14856 + x*(2871 + 19*x*(18 + x)))))))))))/(1.5041173375351259e23*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(1835008 + x*(5780617 + x*(8906283 + x*(8761812 + x*(6049428 + x*(3042774 + x*(1122618 + 17*x*(17556 + x*(3204 + 19*x*(19 + x)))))))))))/(4.3619402788518653e24*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(3231615 + x*(9582060 + x*(13902375 + x*(12887920 + x*(8391950 + x*(3984792 + x*(1389430 + 17*x*(20560 + x*(3555 + 19*x*(20 + x)))))))))))/(1.3085820836555595e26*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 11:
	//if(l == 11)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		const double x7 = x6 * x;
		const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		switch(em)
		{
			case -11: return  (-13749310575*pow(1 - x2,5.5));
			case -10: return  (-13749310575*x*pow(-1 + x2,5));
			case  -9: return  ((-654729075*pow(1 - x2,4.5)*(-1 + 21*x2))/2.);
			case  -8: return  ((654729075*x*pow(-1 + x2,4)*(-1 + 7*x2))/2.);
			case  -7: return  ((-34459425*pow(1 - x2,3.5)*(1 - 38*x2 + 133*x4))/8.);
			case  -6: return  ((-2297295*x*pow(-1 + x2,3)*(15 - 190*x2 + 399*x4))/8.);
			case  -5: return  ((-135135*pow(1 - x2,2.5)*(-5 + 17*x2*(15 - 95*x2 + 133*x4)))/16.);
			case  -4: return  ((135135*x*pow(-1 + x2,2)*(-5 + 85*x2 - 323*x4 + 323*x6))/16.);
			case  -3: return  ((-45045*pow(1 - x2,1.5)*(1 - 60*x2 + 510*x4 - 1292*x6 + 969*x8))/128.);
			case  -2: return  ((-2145*(-1 + x)*x*(1 + x)*(21 - 420*x2 + 2142*x4 - 3876*x6 + 2261*x8))/128.);
			case  -1: return  ((-33*sqrt(1 - x2)*(-21 + 13*x2*(105 - 1050*x2 + 3570*x4 - 4845*x6 + 2261*x8)))/256.);
			case   0: return  ((x*(-693 + 13*x2*(1155 - 6930*x2 + 16830*x4 - 17765*x6 + 6783*x8)))/256.);
			case   1: return  ((sqrt(1 - x2)*(-21 + 13*x2*(105 - 1050*x2 + 3570*x4 - 4845*x6 + 2261*x8)))/1024.);
			case   2: return  (-((-1 + x)*x*(1 + x)*(21 - 420*x2 + 2142*x4 - 3876*x6 + 2261*x8))/1024.);
			case   3: return  ((pow(1 - x2,1.5)*(1 - 60*x2 + 510*x4 - 1292*x6 + 969*x8))/6144.);
			case   4: return  ((x*pow(-1 + x2,2)*(-5 + 85*x2 - 323*x4 + 323*x6))/30720.);
			case   5: return  ((pow(1 - x2,2.5)*(-5 + 17*x2*(15 - 95*x2 + 133*x4)))/3.44064e6);
			case   6: return  (-(x*pow(-1 + x2,3)*(15 - 190*x2 + 399*x4))/1.032192e7);
			case   7: return  ((pow(1 - x2,3.5)*(1 - 38*x2 + 133*x4))/6.193152e7);
			case   8: return  ((x*pow(-1 + x2,4)*(-1 + 7*x2))/6.193152e7);
			case   9: return  ((pow(1 - x2,4.5)*(-1 + 21*x2))/3.7158912e9);
			case  10: return  (-(x*pow(-1 + x2,5))/3.7158912e9);
			case  11: return  (pow(1 - x2,5.5)/8.17496064e10);
			case  12: return  ((pow(-1 + x,6)*(524288 + x*(4263339 + 13*x*(1273620 + x*(3083395 + x*(5127360 + x*(6110958 + 17*x*(311864 + x*(196254 + 19*x*(4608 + x*(1385 + 21*x*(12 + x))))))))))))/(1.657977664831488e17*pow(1 + x,6)));
			case  13: return  ((pow(1 - x,6.5)*(676039 + x*(4594203 + 13*x*(1162005 + x*(2413705 + x*(3488030 + x*(3655526 + 17*x*(165802 + x*(93618 + 19*x*(1989 + x*(545 + 7*x*(13 + x))))))))))))/(1.3263821318651904e18*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(2097152 + x*(12459153 + 13*x*(2770470 + x*(5092465 + x*(6557320 + x*(6166202 + 17*x*(252644 + x*(129690 + 19*x*(2520 + x*(635 + 7*x*(14 + x))))))))))))/(3.315955329662976e19*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(1300075 + x*(6918213 + x*(17968245 + x*(29787835 + x*(34742190 + x*(29726130 + 17*x*(1113322 + x*(524790 + 19*x*(9405 + x*(2195 + 21*x*(15 + x))))))))))))/(1.9895731977977856e20*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(1048576 + x*(5076541 + x*(12018640 + x*(18207105 + x*(19461120 + x*(15308538 + 17*x*(528864 + x*(230730 + 19*x*(3840 + x*(835 + 7*x*(16 + x))))))))))))/(1.790615878018007e21*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(334305 + x*(1488881 + x*(3246847 + x*(4538511 + x*(4485450 + x*(3269994 + 17*x*(104958 + x*(42654 + 19*x*(663 + x*(135 + x*(17 + x))))))))))))/(7.162463512072028e21*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(2097152 + x*(8664201 + x*(17543586 + x*(22798677 + x*(20980440 + x*(14267106 + 17*x*(427980 + x*(162882 + 19*x*(2376 + x*(455 + 3*x*(18 + x))))))))))))/(6.231343255502664e23*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(9694845 + x*(37401415 + x*(70767115 + x*(86019465 + x*(74130210 + x*(47272806 + 17*x*(1331862 + x*(476850 + 19*x*(6555 + x*(1185 + 7*x*(19 + x))))))))))))/(4.361940278851865e25*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(18350080 + x*(66461405 + x*(118122820 + x*(134973825 + x*(109448640 + x*(65746170 + 17*x*(1747032 + x*(590730 + 19*x*(7680 + x*(1315 + 7*x*(20 + x))))))))))))/(1.3522014864440783e27*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 12:
	//if(l == 12)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		//const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		//const double x12 = x11 * x;
		switch(em)
		{
			case -12: return  (316234143225*pow(-1 + x2,6));
			case -11: return  (-316234143225*x*pow(1 - x2,5.5));
			case -10: return  ((-13749310575*pow(-1 + x2,5)*(-1 + 23*x2))/2.);
			case  -9: return  ((-4583103525*x*pow(1 - x2,4.5)*(-3 + 23*x2))/2.);
			case  -8: return  ((654729075*pow(-1 + x2,4)*(1 - 42*x2 + 161*x4))/8.);
			case  -7: return  ((-130945815*x*pow(1 - x2,3.5)*(5 - 70*x2 + 161*x4))/8.);
			case  -6: return  ((-2297295*pow(-1 + x2,3)*(-5 + 285*x2 - 1995*x4 + 3059*x6))/16.);
			case  -5: return  ((-2297295*x*pow(1 - x2,2.5)*(-5 + 95*x2 - 399*x4 + 437*x6))/16.);
			case  -4: return  ((135135*pow(-1 + x2,2)*(5 + 17*x2*(-20 + 190*x2 - 532*x4 + 437*x6)))/128.);
			case  -3: return  ((-15015*x*pow(1 - x2,1.5)*(45 + 17*x2*(-60 + 342*x2 - 684*x4 + 437*x6)))/128.);
			case  -2: return  ((-3003*(-1 + x)*(1 + x)*(-3 + x2*(225 + 17*x2*(-150 + 570*x2 - 855*x4 + 437*x6))))/256.);
			case  -1: return  ((-39*x*sqrt(1 - x2)*(-231 + x2*(5775 + 17*x2*(-2310 + 6270*x2 - 7315*x4 + 3059*x6))))/256.);
			case   0: return  ((231 + 13*x2*(-1386 + x2*(17325 + 17*x2*(-4620 + 9405*x2 - 8778*x4 + 3059*x6))))/1024.);
			case   1: return  ((x*sqrt(1 - x2)*(-231 + x2*(5775 + 17*x2*(-2310 + 6270*x2 - 7315*x4 + 3059*x6))))/1024.);
			case   2: return  (-((-1 + x)*(1 + x)*(-3 + x2*(225 + 17*x2*(-150 + 570*x2 - 855*x4 + 437*x6))))/2048.);
			case   3: return  ((x*pow(1 - x2,1.5)*(45 + 17*x2*(-60 + 342*x2 - 684*x4 + 437*x6)))/30720.);
			case   4: return  ((pow(-1 + x2,2)*(5 + 17*x2*(-20 + 190*x2 - 532*x4 + 437*x6)))/491520.);
			case   5: return  ((x*pow(1 - x2,2.5)*(-5 + 95*x2 - 399*x4 + 437*x6))/491520.);
			case   6: return  (-(pow(-1 + x2,3)*(-5 + 285*x2 - 1995*x4 + 3059*x6))/6.193152e7);
			case   7: return  ((x*pow(1 - x2,3.5)*(5 - 70*x2 + 161*x4))/6.193152e7);
			case   8: return  ((pow(-1 + x2,4)*(1 - 42*x2 + 161*x4))/1.2386304e9);
			case   9: return  ((x*pow(1 - x2,4.5)*(-3 + 23*x2))/3.7158912e9);
			case  10: return  (-(pow(-1 + x2,5)*(-1 + 23*x2))/8.17496064e10);
			case  11: return  ((x*pow(1 - x2,5.5))/8.17496064e10);
			case  12: return  (pow(-1 + x2,6)/1.9619905536e12);
			case  13: return  ((pow(1 - x,6.5)*(4194304 + 13*x*(2894229 + x*(12459153 + x*(33694115 + x*(63272335 + 17*x*(5083442 + x*(5155626 + 19*x*(205218 + x*(114570 + 7*x*(6565 + x*(1793 + 23*x*(13 + x)))))))))))))/(3.315955329662976e19*pow(1 + x,6.5)));
			case  14: return  (-(pow(-1 + x,7)*(1300075 + x*(9812442 + x*(35968338 + x*(83851810 + x*(137358445 + 17*x*(9733780 + x*(8795388 + 19*x*(314748 + x*(159255 + 7*x*(8330 + x*(2090 + 23*x*(14 + x)))))))))))))/(6.631910659325952e19*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(4194304 + x*(27812535 + x*(90032313 + x*(186468065 + x*(273106575 + 17*x*(17415846 + x*(14250810 + 19*x*(464598 + x*(215370 + 7*x*(10375 + x*(2409 + 23*x*(15 + x)))))))))))))/(1.790615878018007e21*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(1671525 + x*(9967184 + x*(29095994 + x*(54532880 + x*(72563115 + 17*x*(4221600 + x*(3165036 + 19*x*(94944 + x*(40665 + x*(12720 + x*(2750 + 23*x*(16 + x)))))))))))))/(7.162463512072028e21*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(4194304 + x*(22828943 + x*(60936319 + x*(104668745 + x*(127980345 + 17*x*(6861846 + x*(4755702 + 19*x*(132294 + x*(52710 + x*(15385 + x*(3113 + 23*x*(17 + x)))))))))))))/(2.077114418500888e23*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(9694845 + x*(48678090 + x*(120007710 + x*(190688210 + x*(216097515 + 17*x*(10761588 + x*(6943524 + 19*x*(180252 + x*(67185 + x*(18390 + x*(3498 + 23*x*(18 + x)))))))))))))/(6.231343255502664e24*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(20971520 + x*(97918685 + x*(224676455 + x*(332655515 + x*(351771705 + 17*x*(16373250 + x*(9891462 + 19*x*(240882 + x*(84390 + x*(21755 + x*(3905 + 23*x*(19 + x)))))))))))))/(1.931716409205826e26*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(300540195 + x*(1313183420 + x*(2821533190 + x*(3915401420 + x*(3884849325 + 17*x*(169876728 + x*(96551700 + 19*x*(2215464 + x*(732495 + 7*x*(25500 + x*(4334 + 23*x*(20 + x)))))))))))))/(4.3270447566210505e28*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 13:
//	if(l == 13)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		//const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		//const double x12 = x11 * x;
		//const double x13 = x12 * x;
		switch(em)
		{
			case -13: return  (-7905853580625*pow(1 - x2,6.5));
			case -12: return  (7905853580625*x*pow(-1 + x2,6));
			case -11: return  ((316234143225*(1 - 25*x2)*pow(1 - x2,5.5))/2.);
			case -10: return  ((-105411381075*x*pow(-1 + x2,5)*(-3 + 25*x2))/2.);
			case  -9: return  ((-4583103525*pow(1 - x2,4.5)*(3 - 138*x2 + 575*x4))/8.);
			case  -8: return  ((4583103525*x*pow(-1 + x2,4)*(3 - 46*x2 + 115*x4))/8.);
			case  -7: return  ((218243025*pow(1 - x2,3.5)*(1 - 63*x2 + 483*x4 - 805*x6))/16.);
			case  -6: return  ((-43648605*x*pow(-1 + x2,3)*(-5 + 105*x2 - 483*x4 + 575*x6))/16.);
			case  -5: return  ((-2297295*pow(1 - x2,2.5)*(5 + 19*x2*(-20 + 210*x2 - 644*x4 + 575*x6)))/128.);
			case  -4: return  ((255255*x*pow(-1 + x2,2)*(45 + 19*x2*(-60 + 378*x2 - 828*x4 + 575*x6)))/128.);
			case  -3: return  ((-15015*pow(1 - x2,1.5)*(-9 + 17*x2*(45 + 19*x2*(-30 + 126*x2 - 207*x4 + 115*x6))))/256.);
			case  -2: return  ((-1365*(-1 + x)*x*(1 + x)*(-99 + 17*x2*(165 + 19*x2*(-66 + 198*x2 - 253*x4 + 115*x6))))/256.);
			case  -1: return  ((-91*sqrt(1 - x2)*(33 + x2*(-2970 + 17*x2*(2475 + 19*x2*(-660 + 1485*x2 - 1518*x4 + 575*x6)))))/1024.);
			case   0: return  ((x*(3003 + x2*(-90090 + 17*x2*(45045 + 19*x2*(-8580 + 7*x2*(2145 - 1794*x2 + 575*x4))))))/1024.);
			case   1: return  ((sqrt(1 - x2)*(33 + x2*(-2970 + 17*x2*(2475 + 19*x2*(-660 + 1485*x2 - 1518*x4 + 575*x6)))))/2048.);
			case   2: return  (-((-1 + x)*x*(1 + x)*(-99 + 17*x2*(165 + 19*x2*(-66 + 198*x2 - 253*x4 + 115*x6))))/6144.);
			case   3: return  ((pow(1 - x2,1.5)*(-9 + 17*x2*(45 + 19*x2*(-30 + 126*x2 - 207*x4 + 115*x6))))/98304.);
			case   4: return  ((x*pow(-1 + x2,2)*(45 + 19*x2*(-60 + 378*x2 - 828*x4 + 575*x6)))/491520.);
			case   5: return  ((pow(1 - x2,2.5)*(5 + 19*x2*(-20 + 210*x2 - 644*x4 + 575*x6)))/8.84736e6);
			case   6: return  (-(x*pow(-1 + x2,3)*(-5 + 105*x2 - 483*x4 + 575*x6))/8.84736e6);
			case   7: return  ((pow(1 - x2,3.5)*(-1 + 63*x2 - 483*x4 + 805*x6))/2.4772608e8);
			case   8: return  ((x*pow(-1 + x2,4)*(3 - 46*x2 + 115*x4))/7.4317824e8);
			case   9: return  ((pow(1 - x2,4.5)*(3 - 138*x2 + 575*x4))/8.17496064e10);
			case  10: return  (-(x*pow(-1 + x2,5)*(-3 + 25*x2))/8.17496064e10);
			case  11: return  ((pow(1 - x2,5.5)*(-1 + 25*x2))/1.9619905536e12);
			case  12: return  ((x*pow(-1 + x2,6))/1.9619905536e12);
			case  13: return  (pow(1 - x2,6.5)/5.10117543936e13);
			case  14: return  (-(pow(-1 + x,7)*(8388608 + x*(82338487 + x*(389375490 + x*(1164016630 + 17*x*(143369170 + x*(220859037 + 19*x*(13499052 + x*(11927820 + 7*x*(1142820 + x*(573485 + 23*x*(9086 + x*(2274 + 25*x*(14 + x))))))))))))))/(1.790615878018007e21*pow(1 + x,7)));
			case  15: return  ((pow(1 - x,7.5)*(5014575 + x*(41664193 + x*(168636570 + x*(436439910 + 17*x*(47056645 + x*(64119915 + 19*x*(3499668 + x*(2785260 + x*(1695555 + x*(777645 + 23*x*(11330 + x*(2622 + 25*x*(15 + x))))))))))))))/(7.162463512072028e21*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(16777216 + x*(123012781 + x*(441477840 + x*(1018713530 + 17*x*(98511760 + x*(121118499 + 19*x*(6000096 + x*(4358820 + x*(2435040 + x*(1029985 + 23*x*(13904 + x*(2994 + 25*x*(16 + x))))))))))))))/(2.077114418500888e23*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(9694845 + x*(64149069 + x*(208303278 + x*(436298414 + 17*x*(38436575 + x*(43219503 + 19*x*(1965948 + x*(1316604 + x*(680697 + x*(267465 + 23*x*(3366 + x*(678 + 5*x*(17 + x))))))))))))))/(1.2462686511005328e24*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(25165824 + x*(152444637 + x*(453913482 + x*(873622674 + 17*x*(70894490 + x*(73628991 + 19*x*(3102300 + x*(1930116 + x*(929772 + x*(341385 + 23*x*(4026 + x*(762 + 5*x*(18 + x))))))))))))))/(3.863432818411652e25*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(300540195 + x*(1683731865 + x*(4641747690 + x*(8283514790 + 17*x*(624377905 + x*(603514683 + 19*x*(23716788 + x*(13793100 + x*(6225255 + x*(2146485 + 23*x*(23826 + x*(4254 + 25*x*(19 + x))))))))))))))/(6.181492509458643e27*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(671088640 + x*(3503946365 + x*(9009861060 + x*(15013089850 + 17*x*(1058015860 + x*(957581955 + 19*x*(35294424 + x*(19285860 + x*(8193240 + x*(2664145 + 23*x*(27940 + x*(4722 + 25*x*(20 + x))))))))))))))/(2.0398925281213523e29*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}


	case 14:
	//	if(l == 14)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		const double x7 = x6 * x;
		const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		//const double x12 = x11 * x;
		//const double x13 = x12 * x;
		//const double x14 = x13 * x;
		switch(em)
		{
			case -14: return  (-213458046676875*pow(-1 + x2,7));
			case -13: return  (-213458046676875*x*pow(1 - x2,6.5));
			case -12: return  ((7905853580625*pow(-1 + x2,6)*(-1 + 27*x2))/2.);
			case -11: return  ((-7905853580625*x*pow(1 - x2,5.5)*(-1 + 9*x2))/2.);
			case -10: return  ((-316234143225*pow(-1 + x2,5)*(1 - 50*x2 + 225*x4))/8.);
			case  -9: return  ((-105411381075*x*pow(1 - x2,4.5)*(3 - 50*x2 + 135*x4))/8.);
			case  -8: return  ((4583103525*pow(-1 + x2,4)*(-1 + 23*x2*(3 - 25*x2 + 45*x4)))/16.);
			case  -7: return  ((-654729075*x*pow(1 - x2,3.5)*(-7 + 23*x2*(7 - 35*x2 + 45*x4)))/16.);
			case  -6: return  ((-218243025*pow(-1 + x2,3)*(1 - 84*x2 + 966*x4 - 3220*x6 + 3105*x8))/128.);
			case  -5: return  ((-43648605*x*pow(1 - x2,2.5)*(-1 + 5*x2)*(-5 + 23*x2*(5 - 17*x2 + 15*x4)))/128.);
			case  -4: return  ((2297295*pow(-1 + x2,2)*(-1 + 19*x2*(5 - 70*x2 + 322*x4 - 575*x6 + 345*x8)))/256.);
			case  -3: return  ((-23205*x*pow(1 - x2,1.5)*(-99 + 19*x2*(165 - 1386*x2 + 4554*x4 - 6325*x6 + 3105*x8)))/256.);
			case  -2: return  ((-1365*(-1 + x)*(1 + x)*(33 + 17*x2*(-198 + 19*x2*(165 + x2*(-924 + 23*x2*(99 - 110*x2 + 45*x4))))))/1024.);
			case  -1: return  ((-105*x*sqrt(1 - x2)*(429 + 17*x2*(-858 + 19*x2*(429 - 1716*x2 + 3289*x4 - 2990*x6 + 1035*x8))))/1024.);
			case   0: return  ((-429 + x2*(45045 + 17*x2*(-45045 + 19*x2*(15015 - 45045*x2 + 69069*x4 - 52325*x6 + 15525*x8))))/2048.);
			case   1: return  ((x*sqrt(1 - x2)*(429 + 17*x2*(-858 + 19*x2*(429 - 1716*x2 + 3289*x4 - 2990*x6 + 1035*x8))))/2048.);
			case   2: return  (-((-1 + x)*(1 + x)*(33 + 17*x2*(-198 + 19*x2*(165 + x2*(-924 + 23*x2*(99 - 110*x2 + 45*x4))))))/32768.);
			case   3: return  ((x*pow(1 - x2,1.5)*(-99 + 19*x2*(165 - 1386*x2 + 4554*x4 - 6325*x6 + 3105*x8)))/98304.);
			case   4: return  ((pow(-1 + x2,2)*(-1 + 19*x2*(5 - 70*x2 + 322*x4 - 575*x6 + 345*x8)))/196608.);
			case   5: return  ((x*pow(1 - x2,2.5)*(-1 + 5*x2)*(-5 + 23*x2*(5 - 17*x2 + 15*x4)))/983040.);
			case   6: return  (-(pow(-1 + x2,3)*(1 - 84*x2 + 966*x4 - 3220*x6 + 3105*x8))/3.538944e7);
			case   7: return  ((x*pow(1 - x2,3.5)*(-7 + 23*x2*(7 - 35*x2 + 45*x4)))/2.4772608e8);
			case   8: return  ((pow(-1 + x2,4)*(-1 + 23*x2*(3 - 25*x2 + 45*x4)))/5.44997376e9);
			case   9: return  ((x*pow(1 - x2,4.5)*(3 - 50*x2 + 135*x4))/1.634992128e10);
			case  10: return  (-(pow(-1 + x2,5)*(1 - 50*x2 + 225*x4))/6.539968512e11);
			case  11: return  ((x*pow(1 - x2,5.5)*(-1 + 9*x2))/6.539968512e11);
			case  12: return  ((pow(-1 + x2,6)*(-1 + 27*x2))/5.10117543936e13);
			case  13: return  ((x*pow(1 - x2,6.5))/5.10117543936e13);
			case  14: return  (-pow(-1 + x2,7)/1.4283291230208e15);
			case  15: return  ((pow(1 - x,7.5)*(33554432 + x*(357893805 + x*(1845191715 + 17*x*(355584230 + x*(821690010 + 19*x*(74202957 + x*(97118115 + x*(98207820 + x*(76924980 + 23*x*(2015695 + x*(918753 + 25*x*(12270 + x*(2834 + 27*x*(15 + x)))))))))))))))/(2.077114418500888e23*pow(1 + x,7.5)));
			case  16: return  ((pow(-1 + x,8)*(9694845 + x*(88008656 + x*(390179771 + 17*x*(65350048 + x*(132620613 + 19*x*(10621392 + x*(12440553 + x*(11350848 + x*(8081733 + 23*x*(193776 + x*(81301 + 5*x*(5024 + x*(1079 + 9*x*(16 + x)))))))))))))))/(4.154228837001776e23*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(33554432 + x*(269885149 + x*(1064832173 + 17*x*(159534086 + x*(291207558 + 19*x*(21095997 + x*(22474797 + x*(18751884 + x*(12271116 + 23*x*(271711 + x*(105743 + 5*x*(6086 + x*(1222 + 9*x*(17 + x)))))))))))))))/(1.2878109394705507e25*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(300540195 + x*(2188498038 + x*(7836244209 + 17*x*(1068646972 + x*(1781578539 + 19*x*(118303182 + x*(115959579 + x*(89349912 + x*(54195867 + 23*x*(1116258 + x*(405471 + 5*x*(21852 + x*(4121 + 27*x*(18 + x)))))))))))))))/(1.2362985018917287e27*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(268435456 + x*(1794331519 + x*(5906575981 + 17*x*(741949202 + x*(1141941438 + 19*x*(70181991 + x*(63838797 + x*(45773508 + x*(25907772 + 23*x*(499301 + x*(170159 + 5*x*(8626 + x*(1534 + 9*x*(19 + x)))))))))))))))/(1.3599283520809014e28*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(194467185 + x*(1204989140 + x*(3680728375 + x*(7303421480 + x*(10461832425 + 19*x*(599515092 + x*(509489805 + x*(342019920 + x*(181630185 + 23*x*(3291420 + x*(1057001 + 25*x*(10120 + x*(1703 + 9*x*(20 + x)))))))))))))))/(1.3599283520809015e29*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 15:
//	if(l == 15)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		//const double x7 = x6 * x;
		//const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		//const double x12 = x11 * x;
		//const double x13 = x12 * x;
		//const double x14 = x13 * x;
		//const double x15 = x14 * x;
		switch(em)
		{
			case -15: return  (-6190283353629375*pow(1 - x2,7.5));
			case -14: return  (-6190283353629375*x*pow(-1 + x2,7));
			case -13: return  ((-213458046676875*pow(1 - x2,6.5)*(-1 + 29*x2))/2.);
			case -12: return  ((71152682225625*x*pow(-1 + x2,6)*(-3 + 29*x2))/2.);
			case -11: return  ((-7905853580625*pow(1 - x2,5.5)*(1 - 54*x2 + 261*x4))/8.);
			case -10: return  ((-1581170716125*x*pow(-1 + x2,5)*(5 - 90*x2 + 261*x4))/8.);
			case  -9: return  ((-105411381075*pow(1 - x2,4.5)*(-1 + 15*x2*(5 - 45*x2 + 87*x4)))/16.);
			case  -8: return  ((15058768725*x*pow(-1 + x2,4)*(-7 + 175*x2 - 945*x4 + 1305*x6))/16.);
			case  -7: return  ((654729075*pow(1 - x2,3.5)*(-7 + 23*x2*(28 - 5*x2*(70 - 252*x2 + 261*x4))))/128.);
			case  -6: return  ((-218243025*x*pow(-1 + x2,3)*(21 + 23*x2*(-28 + 210*x2 - 540*x4 + 435*x6)))/128.);
			case  -5: return  ((-43648605*pow(1 - x2,2.5)*(-1 + 5*x2*(21 + 23*x2*(-14 + 70*x2 - 135*x4 + 87*x6))))/256.);
			case  -4: return  ((3968055*x*pow(-1 + x2,2)*(-11 + x2*(385 + 23*x2*(-154 + 550*x2 - 825*x4 + 435*x6))))/256.);
			case  -3: return  ((-69615*pow(1 - x2,1.5)*(11 + 19*x2*(-66 + x2*(1155 + 23*x2*(-308 + 825*x2 - 990*x4 + 435*x6)))))/1024.);
			case  -2: return  ((-1785*(-1 + x)*x*(1 + x)*(429 + 19*x2*(-858 + x2*(9009 + 23*x2*(-1716 + 5*x2*(715 - 702*x2 + 261*x4))))))/1024.);
			case  -1: return  ((-15*sqrt(1 - x2)*(-429 + 17*x2*(3003 + 19*x2*(-3003 + x2*(21021 + 23*x2*(-3003 + 5005*x2 - 4095*x4 + 1305*x6))))))/2048.);
			case   0: return  ((x*(-6435 + 17*x2*(15015 + 19*x2*(-9009 + 5*x2*(9009 + 23*x2*(-1001 + 1365*x2 - 945*x4 + 261*x6))))))/2048.);
			case   1: return  ((sqrt(1 - x2)*(-429 + 17*x2*(3003 + 19*x2*(-3003 + x2*(21021 + 23*x2*(-3003 + 5005*x2 - 4095*x4 + 1305*x6))))))/32768.);
			case   2: return  (-((-1 + x)*x*(1 + x)*(429 + 19*x2*(-858 + x2*(9009 + 23*x2*(-1716 + 5*x2*(715 - 702*x2 + 261*x4))))))/32768.);
			case   3: return  ((pow(1 - x2,1.5)*(11 + 19*x2*(-66 + x2*(1155 + 23*x2*(-308 + 825*x2 - 990*x4 + 435*x6)))))/196608.);
			case   4: return  ((x*pow(-1 + x2,2)*(-11 + x2*(385 + 23*x2*(-154 + 550*x2 - 825*x4 + 435*x6))))/196608.);
			case   5: return  ((pow(1 - x2,2.5)*(-1 + 5*x2*(21 + 23*x2*(-14 + 70*x2 - 135*x4 + 87*x6))))/3.93216e6);
			case   6: return  (-(x*pow(-1 + x2,3)*(21 + 23*x2*(-28 + 210*x2 - 540*x4 + 435*x6)))/8.257536e7);
			case   7: return  ((pow(1 - x2,3.5)*(7 + 23*x2*(-28 + 5*x2*(70 - 252*x2 + 261*x4))))/5.44997376e9);
			case   8: return  ((x*pow(-1 + x2,4)*(-7 + 175*x2 - 945*x4 + 1305*x6))/5.44997376e9);
			case   9: return  ((pow(1 - x2,4.5)*(-1 + 15*x2*(5 - 45*x2 + 87*x4)))/1.3079937024e11);
			case  10: return  (-(x*pow(-1 + x2,5)*(5 - 90*x2 + 261*x4))/6.539968512e11);
			case  11: return  ((pow(1 - x2,5.5)*(1 - 54*x2 + 261*x4))/1.70039181312e13);
			case  12: return  ((x*pow(-1 + x2,6)*(-3 + 29*x2))/5.10117543936e13);
			case  13: return  ((pow(1 - x2,6.5)*(-1 + 29*x2))/1.4283291230208e15);
			case  14: return  (-(x*pow(-1 + x2,7))/1.4283291230208e15);
			case  15: return  (pow(1 - x2,7.5)/4.2849873690624e16);
			case  16: return  ((pow(-1 + x,8)*(67108864 + x*(773201629 + 17*x*(254009552 + x*(905298087 + 19*x*(120484128 + x*(227919567 + x*(332020752 + x*(378211317 + 23*x*(14735424 + x*(10369139 + 5*x*(1135024 + x*(473941 + 9*x*(16224 + x*(3479 + 29*x*(16 + x))))))))))))))))/(1.2878109394705507e25*pow(1 + x,8)));
			case  17: return  ((pow(1 - x,8.5)*(300540195 + x*(2961699667 + 17*x*(840239467 + x*(2612081403 + 19*x*(306211701 + x*(514990725 + x*(672728301 + x*(692583837 + 23*x*(24561141 + x*(15832773 + 5*x*(1596793 + x*(617513 + 9*x*(19669 + x*(3941 + 29*x*(17 + x))))))))))))))))/(4.120995006305762e26*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(1073741824 + x*(9409526397 + 17*x*(2383673898 + x*(6648525183 + 19*x*(702899244 + x*(1071759447 + x*(1275962226 + x*(1203294213 + 23*x*(39277656 + x*(23411267 + 15*x*(730818 + x*(263471 + 3*x*(23556 + x*(4431 + 29*x*(18 + x))))))))))))))))/(1.3599283520809014e28*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(194467185 + x*(1547392867 + x*(6064402273 + x*(15435845067 + 19*x*(1493930727 + x*(2092366485 + x*(2296162407 + x*(2003049213 + 23*x*(60691719 + x*(33692901 + 5*x*(2948363 + x*(996281 + 9*x*(27911 + x*(4949 + 29*x*(19 + x))))))))))))))))/(2.719856704161803e28*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(536870912 + x*(3931066765 + x*(14196825860 + x*(33358696455 + 19*x*(2986782120 + x*(3879039087 + 5*x*(791438340 + x*(643465713 + 23*x*(18218640 + x*(9475543 + x*(3894044 + x*(1238965 + 9*x*(32760 + x*(5495 + 29*x*(20 + x))))))))))))))))/(9.51949846456631e29*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}

	case 16:
//	if(l == 16)
	{
		const double x1 = x;
		const double x2 = x1 * x;
		const double x3 = x2 * x;
		const double x4 = x3 * x;
		const double x5 = x4 * x;
		const double x6 = x5 * x;
		const double x7 = x6 * x;
		const double x8 = x7 * x;
		//const double x9 = x8 * x;
		//const double x10 = x9 * x;
		//const double x11 = x10 * x;
		//const double x12 = x11 * x;
		//const double x13 = x12 * x;
		//const double x14 = x13 * x;
		//const double x15 = x14 * x;
		//const double x16 = x15 * x;
		switch(em)
		{
			case -16: return  (191898783962510625*pow(-1 + x2,8));
			case -15: return  (-191898783962510625*x*pow(1 - x2,7.5));
			case -14: return  ((-6190283353629375*pow(-1 + x2,7)*(-1 + 31*x2))/2.);
			case -13: return  ((-2063427784543125*x*pow(1 - x2,6.5)*(-3 + 31*x2))/2.);
			case -12: return  ((71152682225625*pow(-1 + x2,6)*(3 - 174*x2 + 899*x4))/8.);
			case -11: return  ((-14230536445125*x*pow(1 - x2,5.5)*(15 - 290*x2 + 899*x4))/8.);
			case -10: return  ((-527056905375*pow(-1 + x2,5)*(-5 + 9*x2*(45 - 435*x2 + 899*x4)))/16.);
			case  -9: return  ((-75293843625*x*pow(1 - x2,4.5)*(-35 + 945*x2 - 5481*x4 + 8091*x6))/16.);
			case  -8: return  ((15058768725*pow(-1 + x2,4)*(7 + 5*x2*(-140 + 9*x2*(210 - 812*x2 + 899*x4))))/128.);
			case  -7: return  ((-5019589575*x*pow(1 - x2,3.5)*(21 - 700*x2 + 5670*x4 - 15660*x6 + 13485*x8))/128.);
			case  -6: return  ((-43648605*pow(-1 + x2,3)*(-21 + 115*x2*(21 - 350*x2 + 1890*x4 - 3915*x6 + 2697*x8)))/256.);
			case  -5: return  ((-3968055*x*pow(1 - x2,2.5)*(-231 + 115*x2*(77 - 770*x2 + 2970*x4 - 4785*x6 + 2697*x8)))/256.);
			case  -4: return  ((1322685*pow(-1 + x2,2)*(11 + x2*(-1386 + 115*x2*(231 - 1540*x2 + 4455*x4 - 5742*x6 + 2697*x8))))/1024.);
			case  -3: return  ((-101745*x*pow(1 - x2,1.5)*(143 + x2*(-6006 + 23*x2*(3003 + 5*x2*(-2860 + 6435*x2 - 6786*x4 + 2697*x6)))))/1024.);
			case  -2: return  ((-765*(-1 + x)*(1 + x)*(-143 + 19*x2*(1001 + x2*(-21021 + 23*x2*(7007 + 5*x2*(-5005 + 9009*x2 - 7917*x4 + 2697*x6))))))/2048.);
			case  -1: return  ((-17*x*sqrt(1 - x2)*(-6435 + 19*x2*(15015 + x2*(-189189 + 115*x2*(9009 - 25025*x2 + 36855*x4 - 27405*x6 + 8091*x8)))))/2048.);
			case   0: return  ((6435 + 17*x2*(-51480 + 19*x2*(60060 + x2*(-504504 + 115*x2*(18018 - 40040*x2 + 49140*x4 - 31320*x6 + 8091*x8)))))/32768.);
			case   1: return  ((x*sqrt(1 - x2)*(-6435 + 19*x2*(15015 + x2*(-189189 + 115*x2*(9009 - 25025*x2 + 36855*x4 - 27405*x6 + 8091*x8)))))/32768.);
			case   2: return  (-((-1 + x)*(1 + x)*(-143 + 19*x2*(1001 + x2*(-21021 + 23*x2*(7007 + 5*x2*(-5005 + 9009*x2 - 7917*x4 + 2697*x6))))))/196608.);
			case   3: return  ((x*pow(1 - x2,1.5)*(143 + x2*(-6006 + 23*x2*(3003 + 5*x2*(-2860 + 6435*x2 - 6786*x4 + 2697*x6)))))/196608.);
			case   4: return  ((pow(-1 + x2,2)*(11 + x2*(-1386 + 115*x2*(231 - 1540*x2 + 4455*x4 - 5742*x6 + 2697*x8))))/3.93216e6);
			case   5: return  ((x*pow(1 - x2,2.5)*(-231 + 115*x2*(77 - 770*x2 + 2970*x4 - 4785*x6 + 2697*x8)))/8.257536e7);
			case   6: return  (-(pow(-1 + x2,3)*(-21 + 115*x2*(21 - 350*x2 + 1890*x4 - 3915*x6 + 2697*x8)))/1.81665792e9);
			case   7: return  ((x*pow(1 - x2,3.5)*(21 - 700*x2 + 5670*x4 - 15660*x6 + 13485*x8))/1.81665792e9);
			case   8: return  ((pow(-1 + x2,4)*(7 + 5*x2*(-140 + 9*x2*(210 - 812*x2 + 899*x4))))/1.3079937024e11);
			case   9: return  ((x*pow(1 - x2,4.5)*(-35 + 945*x2 - 5481*x4 + 8091*x6))/6.539968512e11);
			case  10: return  (-(pow(-1 + x2,5)*(-5 + 9*x2*(45 - 435*x2 + 899*x4)))/1.70039181312e13);
			case  11: return  ((x*pow(1 - x2,5.5)*(15 - 290*x2 + 899*x4))/5.10117543936e13);
			case  12: return  ((pow(-1 + x2,6)*(3 - 174*x2 + 899*x4))/1.4283291230208e15);
			case  13: return  ((x*pow(1 - x2,6.5)*(-3 + 31*x2))/1.4283291230208e15);
			case  14: return  (-(pow(-1 + x2,7)*(-1 + 31*x2))/4.2849873690624e16);
			case  15: return  ((x*pow(1 - x2,7.5))/4.2849873690624e16);
			case  16: return  (pow(-1 + x2,8)/1.371195958099968e18);
			case  17: return  ((pow(1 - x,8.5)*(2147483648 + 17*x*(1564082093 + x*(9409526397 + 19*x*(1908294999 + x*(5242726695 + x*(10842706539 + x*(17403099483 + 23*x*(958899909 + x*(967628277 + 5*x*(155756975 + x*(99516703 + 9*x*(5543343 + x*(2135679 + 29*x*(21063 + x*(4215 + 31*x*(17 + x)))))))))))))))))/(1.3599283520809014e28*pow(1 + x,8.5)));
			case  18: return  (-(pow(-1 + x,9)*(583401555 + x*(6206260694 + x*(32370081012 + 19*x*(5745223206 + x*(13941914340 + x*(25693881570 + x*(37051208964 + 23*x*(1847972874 + x*(1699590618 + 5*x*(250888770 + x*(147825964 + 9*x*(7631910 + x*(2737644 + 29*x*(25242 + x*(4740 + 31*x*(18 + x)))))))))))))))))/(2.719856704161803e28*pow(1 + x,9)));
			case  19: return  ((pow(1 - x,9.5)*(2147483648 + x*(20383134887 + x*(95221786725 + 19*x*(15205345365 + x*(33358696455 + x*(55856603313 + x*(73545437427 + 115*x*(673097667 + x*(570591153 + x*(389869645 + x*(213524311 + 9*x*(10285821 + x*(3454815 + 29*x*(29925 + x*(5295 + 31*x*(19 + x)))))))))))))))))/(9.51949846456631e29*pow(1 + x,9.5)));
			case  20: return  ((pow(-1 + x,10)*(2268783825 + x*(19605872724 + x*(83562854280 + 19*x*(12205637780 + x*(24566381140 + x*(37857757980 + x*(46027451624 + 115*x*(390271420 + x*(307519542 + x*(195939260 + x*(100380280 + 3*x*(13609596 + x*(4300660 + 29*x*(35140 + x*(5880 + 31*x*(20 + x)))))))))))))))))/(1.1423398157479574e31*pow(1 + x,10)));

			default: fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
		}
	}
	}


	fprintf(stderr, "No rule for P(%i,%i)\n", l,m); return 0;
}
#endif
