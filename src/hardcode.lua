filename = arg[1]

f = io.open(filename, "r")

if f == nil then
	error("failed to open `" .. filename .. "'")
end

a, b, base = string.find(filename, "(.*)\.lua")

if base == nil then
	error("filename must end with .lua")
end
	
bytes = {}
repeat
	c = f:read(1)
	if c ~= nil then
		local b = string.byte(c)
		table.insert(bytes, b)
	end
until c == nil

f:close()

f = io.open(base .. ".cpp", "w")

N = table.maxn(bytes)

f:write("// This file is automatically generated by the command\n")
f:write("// lua hardcode.lua " .. filename .. "\n\n")
f:write("#include \"" .. base .. ".h\"\n")

baseFixed = string.gsub(base, "%-", "")
baseFixed = string.gsub(baseFixed, "%.", "")
M = string.len(filename)

f:write("static char  " .. baseFixed .. "_name[ " .. M+2 .. "] = \"=" .. filename .. "\";\n")
f:write("static char  " .. baseFixed .. "[" .. N+1 .. "] = {\n")

i = 0
while i <= N do
	for j=1,16 do
		i=i+1
		if i<=N then
			f:write(string.format("0x%02X,", bytes[i]))
			if j == 16 then
				f:write("\n")
			end
		end
	end
end
f:write(string.format("0x%02x};\n", 0))

f:write("const char* __" .. baseFixed .. "_name() {return " .. baseFixed .. "_name;}\n")
f:write("const char* __" .. baseFixed .. "() {return " .. baseFixed .. ";}\n")


f:close()


f = io.open(base .. ".h", "w")
f:write("// This file is automatically generated by the command\n")
f:write("// lua hardcode.lua " .. filename .. "\n\n")

f:write("extern \"C\"{\n")
f:write("const char* __" .. baseFixed .. "_name();\n")
f:write("const char* __" .. baseFixed .. "();\n")

f:write("}\n\n")

f:write("// convenience macro\n")
f:write(string.format(
[[#define luaL_dofile_%s(L) \
{ \
  if(luaL_dostringn(L, __%s(), __%s_name())) \
  { \
        fprintf(stderr, "%%s\n", lua_tostring(L, -1)); \
        return luaL_error(L, lua_tostring(L, -1)); \
  } \
}
]], baseFixed, baseFixed ,baseFixed))
f:close()